// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum TransactionSide {
    BUY
    SELL
}

model Transaction {
    id        String          @id @default(cuid())
    user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    date      DateTime
    symbol    String
    side      TransactionSide
    quantity  Float
    price     Float
    priceCurrency Currency @default(USD)
    fee       Float?
    feeCurrency  Currency? // optional; if null, treat as priceCurrency
    note      String?
    createdAt DateTime        @default(now())

    @@index([userId, date])
    @@index([userId, symbol])
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    passwordHash  String?
    theme         Theme     @default(LIGHT)
    currency      Currency  @default(USD)
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    transactions  Transaction[]
    watchlist     WatchlistItem[]
    emailChangeTokens EmailChangeToken[]
    goals         Goal[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model EmailChangeToken {
    id        String   @id @default(cuid())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    newEmail  String
    token     String   @unique
    expiresAt DateTime
    createdAt DateTime @default(now())

    @@index([userId])
    @@index([expiresAt])
}

enum Theme {
    LIGHT
    DARK
}

enum Currency {
    EUR
    USD
    GBP
    HKD
    CHF
    RUB
}

model WatchlistItem {
    id            String    @id @default(cuid())
    user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String
    symbol        String
    displaySymbol String?
    description   String?
    type          String?
    currency      Currency @default(USD)
    createdAt     DateTime @default(now())
    starred       Boolean  @default(false)

    @@unique([userId, symbol])
    @@index([userId])
    @@index([symbol])
}

// Store latest FX rates by base->quote with timestamp
model FxRate {
    id        String   @id @default(cuid())
    base      Currency
    quote     Currency
    rate      Float
    fetchedAt DateTime @default(now())

    @@unique([base, quote])
    @@index([fetchedAt])
}

/// Personal financial goals for a user (e.g., buy a house, retirement)
model Goal {
    id             String    @id @default(cuid())
    user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId         String
    title          String
    targetAmount   Float
    targetCurrency Currency  @default(USD)
    targetDate     DateTime?
    note           String?
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt

    @@index([userId])
    @@index([targetDate])
}
